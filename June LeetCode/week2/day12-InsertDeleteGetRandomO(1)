/* Problem->
Insert Delete GetRandom O(1)

Design a data structure that supports all following operations in average O(1) time.

insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.

*/

//Solution->//

class RandomizedSet {

    /** Initialize your data structure here. */

    // HashMap<Integer,Integer> hash;
    ArrayList<Integer> arr;
    public RandomizedSet() {
    //hash=new HashMap<Integer,Integer>();
   arr=new ArrayList<Integer>();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
       if(arr.size()>0 && arr.contains(val))
       return false;
       
       arr.add(val);
       
       // System.out.println(arr);
    
        return true;
        
        
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        
       if(arr.size()==0)
        return false;
        
        if(!(arr.contains(val)))
        return false;
        
        int i=arr.indexOf(val);
        arr.remove(i);
        return true;
        
        
    }
    
    /** Get a random element from the set. */
    public int getRandom() {
        
        if(arr.size()==0)
            return -1;
        
        Random rand=new Random();
        
        int index=rand.nextInt(arr.size());
        return arr.get(index);
    }
}

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
